package com.jsf.dao;

import java.io.StringReader;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

//import org.h2.tools.RunScript;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.jsf.model.User;

@Repository
public class UserRepositoryImpl extends AbstractJpaRepository<User, Integer> implements UserRepository {

	private static final Logger logger = LoggerFactory.getLogger(UserRepositoryImpl.class);
	
	@Autowired
	private DataSource dataSource;

	@Override
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED, rollbackFor = Exception.class, isolation = Isolation.DEFAULT)
	public void saveUser(User user) {
		this.create(user);
		logger.info("User saved successfully, User Details: " + user);
	}

	@SuppressWarnings("unchecked")
	@Override
	@Transactional(readOnly = true, propagation = Propagation.REQUIRED, rollbackFor = Exception.class, isolation = Isolation.DEFAULT)
	public List<User> listUser() {
		//testDb();
		
		return this.getEntityManager().createQuery("from User").getResultList();
		//return new ArrayList<User>();
	}
	
//	public void testDb() {
//		String url = "jdbc:h2:mem:testdb";
//		String username = "sa";
//		String password = "";
//		
//		try {
//			Connection connect = DriverManager.getConnection(url, username, password);
//			
//			StringBuilder sb = new StringBuilder();
//			
////			sb = new StringBuilder("DROP TABLE Users;");
////			RunScript.execute(connect, new StringReader(sb.toString()));
//			
////			sb = new StringBuilder(" CREATE TABLE USERS ( \r\n" + 
////					"  id int(11) unsigned NOT NULL AUTO_INCREMENT, \r\n" + 
////					"  username varchar(20) NOT NULL DEFAULT '', \r\n" + 
////					"  password varchar(20) NOT NULL DEFAULT '', \r\n" + 
////					"  PRIMARY KEY (`id`) \r\n" + 
////					") ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8; ");
//			
//			sb = new StringBuilder(" CREATE TABLE USERS ( " + 
//					" id bigint generated by default as identity , " + 
//					" username varchar(50) NOT NULL , " + 
//					" password varchar(50) NOT NULL , " + 
//					" enabled boolean not null, " +
//					" primary key(id) " + 
//					" ); ");
//			
//			RunScript.execute(connect, new StringReader(sb.toString()));
//			
//			//
//			
//			sb = new StringBuilder(" CREATE TABLE AUTHORITIES ( " + 
//					" id int(11) unsigned not null primary key , " + 
//					" username varchar(50) NOT NULL , " + 
//					" authority  varchar(50) NOT NULL , " + 
//					" constraint fk_authorities_users foreign key(username) references users(username) " + 
//					" ); ");
//			
//			RunScript.execute(connect, new StringReader(sb.toString()));
//			
//			//
//			
//			sb = new StringBuilder(" create unique index ix_auth_username on authorities (username,authority); ");
//			
//			RunScript.execute(connect, new StringReader(sb.toString()));
//			
//		} catch (SQLException ex) {
//			System.out.println("in exec");
//			System.out.println(ex.getMessage());
//		}
//	}

	@Override
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED, rollbackFor = Exception.class, isolation = Isolation.DEFAULT)
	public void deleteUser(User user) {
		this.delete(user);
		logger.info("User removed successfully, User Details: " + user);
	}
	
	@Override
	public List<User> getUserListTest() {

		List<User> users = new ArrayList<User>();
		User user;
		
		for (int i = 0; i < 5; i++) {
			user = new User();
			user.setId(i);
			user.setEmail("name" + i + "@name.com");
			user.setPassword("password " + i);
			user.setEnabled(true);
			users.add(user);
		}

		for (User u : users) {
			System.out.println(u);
		}

		return users;
	}

	@Override
	public User findByUsername(String username) {
		// TODO Auto-generated method stub
		return null;
	}

}